= Welcome to Ray's cruiser Shop
== Background Information
This demo simulates how business processes flow across multiple technology platforms, i.e. Ruby, Salesforce, and ERP
sytem. In this scenario, Ray's Cruiser Shop, a custom bicycle shop,
 * sells bicycle parts online; it's portal is suitable for SEO (Search Engine Optimization) via meta-tags.
 * manages customer relationship - i.e. product discount, reporting & dashboard (business intelligence & analytics)
 * maintains ERP - production scheduling, inventory control, ...

In large enterprises, there are multiple applications / platforms / technologies. Overlooking its complicated surface &
and examing from management point view, projects get their positive or negative ROI (Return On Investment) from how well
they are able to carry-on and support smooth running business processes, essential to company's core business activities.

Likewise, in our scenario, we have three different applications.
1. Front-end Custom Portal - A Ruby-On-Rails application
2. Salesforce - CRM for Business Analytics, Dashboard, and Reporting
3. ERP system - A Java (Spring) application, which can be hosted in a variety of application server, including SAP NetWeaver.

== Benefit:
1. Perservation of existing IT investment, vis-a-vis, ERP, SCM, home grown application, etc.
2. DatenSchutz (Data Protection), critical data can be stored in-house, and they can be seamless meshed up with cloud-based application.
3. Leveraging best-of-breed technologies - Certain platforms are better than others at certain things.

== Enabling Technologies
1. REST API / JSON
2. Community Data Model (a combination of NoSQL + domain model, i.e. Salesforce)
3. Ruby, Apex, Spring, ...

== Setup Instruction for the Spring Application
- This is the Spring portion of the demo. It runs in all types of Java Containers, i.e. Tomcat, SAPNetWeaver, GlassFish, Spring tServer, ...
Spring is lighter than J2EE. 
- JSON is generated by the 'Jackson' library. For configuration, see 'applicationContext.xml' -> Jackson section.

=== Function
1. Manages inventory level
2. Sets product delivery date, via JSON
3. Shows that Java / Ruby application can be easily integrated through REST calls.

=== Prerequisites
Have a MongoDB server running (http://www.mongodb.org). Spring-to-MongoDB connection is set inside the 'spring.properties' file, 
which is loaded by the 'spring-data.xml'. 

This MongoDB could be shared with the Ruby application.

=== Configuration
The application start-up process is as follows:
	1. web.xml
	2. applicationContext.xml
	3. spring-data.xml
	4. spring.properties (instantiate the Spring to MongoDB connection.)

After you have Spring application running, you should update the Ruby File's SAP connector to this application.

=== Side note 
SAP Netweaver is very fickle. To deploy the application,
* You must have a Internet connection, because SAP NetWeaver validates every DTD (all the XML files) and verify each Java library exists
and is the right version. Otherwise, it will blow up. Hence, the deployment process is painfully slow.
* The account under which this application runs must have all the privileges. Otherwise, NetWeaver will complain and stop it from working,
hint, Guest Role must have a lot of privileges.
* Put required library inside the 'Web-Inf/library' folder. SAP NetWeaver is based on an older version of Eclipse 3.6 and can't automatically 
load Maven dependencies. (out-of-date technology!) 
* Eclipse is junky. You need to specify project libraries twice. Once in the "Java Build Path" & again in the "Deployment Assembly" option.
That's why I hate Eclipse with a passion! Eclipse is a bad Omen.

 